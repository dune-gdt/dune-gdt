# THIS FILE IS AUTOGENERATED -- DO NOT EDIT       #
# Edit and Re-run .ci/gitlab/config_template.py instead  #
stages:
  - sanity
  - images
{%- for kind in kinds %}
  - {{kind}}
{%- endfor %}
  - python
  - wheels
  - test
  - publish

variables:
    # only the image builder needs the subdirs checked out
    GIT_SUBMODULE_STRATEGY: none
    TRAVIS_BRANCH: ${CI_COMMIT_REF_NAME}
    TRAVIS_COMMIT: ${CI_COMMIT_SHA}
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_COMPILERCHECK: content
    CCACHE_COMPRESS: "true"
    PYTEST_ADDOPTS: "-s"
    MY_MODULE: dune-gdt
    ML_TAG: {{ml_tag}}
    WHEEL_DIR: ${CI_PROJECT_DIR}/wheelhouse
    DUNE_BUILD_DIR: ${CI_PROJECT_DIR}/build
    DUNE_SRC_DIR: ${CI_PROJECT_DIR}

.image_builder:
    tags:
      - docker-in-docker
      - long execution time
    stage: images
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: harbor.uni-muenster.de/proxy-docker/library/docker:19.03.12
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        IMAGE_NAME: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}
        IMAGE: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
        GIT_SUBMODULE_STRATEGY: recursive
    before_script:
      - |
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        apk --update add py3-pip openssh-client rsync git file bash python3 curl
        pip3 install -U docker jinja2 docopt
    script:
      - |
        git submodule update --init --recursive
        docker build --cache-from=${IMAGE_NAME}:${CI_COMMIT_BEFORE_SHA} --build-arg BUILD_CXX=${CXX} --build-arg BUILD_CC=${CC}
        --build-arg DEBIAN_BASE=${CI_IMAGE} --build-arg BUILD_OPTS=${OPTS} -t ${IMAGE} -f deps/Dockerfile .
        docker push ${IMAGE}
    services:
        - name: harbor.uni-muenster.de/proxy-docker/library/docker:dind
          alias: docker

.test-base:
    tags:
      - amm-only
    variables:
      GIT_STRATEGY: none
    stage: test
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
    cache:
      - key: "${CI_IMAGE}_${COMPILER}"
        paths:
          - .ccache
      - key: "${CI_IMAGE}"
        paths:
          - .cache/
    before_script:
      - |
        mkdir ./testresults && chmod -R 777 ./testresults
        ccache --zero-stats || true
    after_script:
      - ccache --show-stats
    artifacts:
      reports:
        junit: './testresults/*xml'

.pre-commit:
    stage: sanity
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: "harbor.uni-muenster.de/proxy-docker/library/python:3.9"
    cache:
      paths:
        - ${CI_PROJECT_DIR}/.cache/pre-commit
    variables:
        PRECOMMIT: "pre-commit run --all"
    before_script:
        - pip install pre-commit jinja2 python-dotenv
        - pre-commit install --install-hooks

format_check:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} clang-format
        - ${PRECOMMIT} yapf
        - ${PRECOMMIT} trailing-whitespace
        - ${PRECOMMIT} cmake-format

lint:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} check-added-large-files
        {# disabled for now, lots of issues #}
        {# - ${PRECOMMIT} flake8 #}
        - ${PRECOMMIT} debug-statements
        - ${PRECOMMIT} check-yaml

ci_setup:
  extends: .pre-commit
  script:
    - ./.ci/gitlab/config_template.py
    - git diff --exit-code .ci/gitlab/config.yml


{% for (cc, cxx), image in compiler_images -%}
{{ image }} {{ cc }}:
    extends: .image_builder
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
        CC: {{ cc }}
        CXX: {{ cxx }}
        OPTS: travis.ninja
{% endfor %}

{% for (cc, cxx), image, kind in matrix %}
{{ cc }} {{ image }} {{kind}}:
    extends: .test-base
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
    stage: {{kind}}
    needs: ["{{ image }} {{ cc }}"]
    script:
          - /src/.ci/gitlab/test_{{kind}}.bash
{% endfor %}

{% for (cc, cxx), image in compiler_images %}
{{ image }} {{ cc }} python:
    extends: .test-base
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
    stage: python
    needs: ["{{ image }} {{ cc }}"]
    script:
          - /src/.ci/gitlab/test_python.bash
{% endfor %}


.wheels_base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    LOCAL_UID: 0
  stage: wheels
  image: zivgitlab.wwu.io/ag-ohlberger/dune-community/docker/manylinux-2_28_x86_64_py${GDT_PYTHON_VERSION}:${ML_TAG}
  needs: []
  tags:
    - amm-only
  cache:
    paths:
      - ccache
    when: 'always'
    key: ${GDT_PYTHON_VERSION}_${ML_TAG}
  artifacts:
    expire_in: 1 day
    paths:
      - ninja_log_*.tar.gz
      - ${WHEEL_DIR}/final/dune*whl
  after_script:
    - tar cfz ninja_log_${STEP}_${GDT_PYTHON_VERSION}.tar.gz ${DUNE_BUILD_DIR}/dune-*/.ninja_log || true

.test_base:
  image: harbor.uni-muenster.de/proxy-docker/library/python:${GDT_PYTHON_VERSION}-slim
  stage: test
  before_script:
    - apt update
    - apt install mpi-default-dev build-essential cmake g++ -y
    - pip install mpi4py
  script:
    - pip install ${WHEEL_DIR}/final/dune*whl
    - python -c 'from dune.xt import *'
    - python -c 'from dune.gdt import *'

{%- for py in pythons %}
wheels {{py}}:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "{{py}}"
  {#- this can only be one script exactly, to make skipping from within itself possible #}
  script: ./.ci/make_wheels.bash
  after_script:
  - ccache --show-stats
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl
      - ${WHEEL_DIR}/final/debug_symbols.tgz

test wheels {{py}}:
  extends: .test_base
  variables:
    GIT_SUBMODULE_STRATEGY: none
    GDT_PYTHON_VERSION: "{{py}}"
  needs: ["wheels {{py}}",]
  dependencies: ["wheels {{py}}",]
{%- endfor %}

.publish:
  image: alpine:3.15
  dependencies:
{%- for py in pythons %}
  -  "wheels {{py}}"
{%- endfor %}
  needs:
{%- for py in pythons %}
  -  "wheels {{py}}"
  -  "test wheels {{py}}"
{%- endfor %}
  stage: publish
  variables:
    MOD_WHEEL_PREFIX: dune.gdt
    GITLAB_PYPI: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/
  before_script:
      - apk --update add py3-pip git file bash python3 py3-cffi py3-cryptography
      - pip3 install -U twine
  script:
    - python3 -m twine upload ${TWINE_TARGET} ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl


publish test:
  extends: .publish
  variables:
    TWINE_TARGET: --repository testpypi
    TWINE_PASSWORD: ${TEST_PYPI_PASSWORD}
    TWINE_USERNAME: ${TEST_PYPI_USERNAME}

publish:
  extends: .publish
  rules:
    - if: $CI_COMMIT_TAG =~ /^20(2\d).(\d+).(\d+)/

  variables:
    TWINE_PASSWORD: ${PYPI_PASSWORD}
    TWINE_USERNAME: ${PYPI_USERNAME}

publish gitlab:
  extends: .publish
  variables:
    TWINE_TARGET: --repository-url ${GITLAB_PYPI}
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token