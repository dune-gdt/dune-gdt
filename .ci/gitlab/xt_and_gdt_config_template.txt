# THIS FILE IS AUTOGENERATED -- DO NOT EDIT       #
# Edit and Re-run .ci/gitlab/config_template.py instead  #
stages:
  - sanity
  - images
{%- for kind in kinds %}
  - {{kind}}
{%- endfor %}
  - python
  - wheels
  - test
  - publish

variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TRAVIS_BRANCH: ${CI_COMMIT_REF_NAME}
    TRAVIS_COMMIT: ${CI_COMMIT_SHA}
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_COMPILERCHECK: content
    CCACHE_COMPRESS: "true"
    PYTEST_ADDOPTS: "-s"
    MY_MODULE: dune-gdt
    BASE_PROJECT: zivgitlab.wwu.io/ag-ohlberger/dune-community/DUNE_XT_OR_DUNE_GDT-super
    ML_TAG: 4c42d22a2aefc41ab1d52f2c4b9df09cb3b8a6af
    WHEEL_DIR: ${CI_PROJECT_DIR}/wheelhouse
    DUNE_BUILD_DIR: ${CI_PROJECT_DIR}/build
    DUNE_SRC_DIR: ${CI_PROJECT_DIR}

.image_builder:
    tags:
      - docker-in-docker
      - long execution time
    stage: images
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: harbor.uni-muenster.de/proxy-docker/library/docker:19.03.12
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        IMAGE: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
    before_script:
      - |
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        apk --update add py3-pip openssh-client rsync git file bash python3 curl
        pip3 install -U docker jinja2 docopt
    script:
      - |
        git submodule update --init --recursive
        docker build --build-arg DEBIAN_BASE=${CI_IMAGE} --build-arg CONFIG_OPTS=${OPTS} -t ${IMAGE} -f deps/Dockerfile deps/
        docker push ${IMAGE}
    services:
        - name: harbor.uni-muenster.de/proxy-docker/library/docker:dind
          alias: docker

.subdir-test:
    tags:
      - long execution time
    stage: test
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
    cache:
      - key: "${CI_IMAGE}_${COMPILER}"
        paths:
          - .ccache
      - key: "${CI_IMAGE}"
        paths:
          - .cache/
    before_script:
      - |
        mkdir ./testresults && chmod -R 777 ./testresults
        ccache --zero-stats || true
    after_script:
      - ccache --show-stats
    artifacts:
      reports:
        junit: './testresults/*xml'

.pre-commit:
    stage: sanity
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: "harbor.uni-muenster.de/proxy-docker/library/python:3.9"
    cache:
      paths:
        - ${CI_PROJECT_DIR}/.cache/pre-commit
    variables:
        PRECOMMIT: "pre-commit run --all"
    before_script:
        - pip install pre-commit
        - pre-commit install --install-hooks

{# format_check:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} clang-format
        - ${PRECOMMIT} yapf
        - ${PRECOMMIT} trailing-whitespace
        - ${PRECOMMIT} cmake-format

lint:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} check-added-large-files
        {# disabled for now, lots of issues #}
        {# - ${PRECOMMIT} flake8 #}
        - ${PRECOMMIT} debug-statements
        - ${PRECOMMIT} check-yaml #}


{% for (cc, cxx), image in compiler_images -%}
{{ image }} {{ cc }}:
    extends: .image_builder
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
        CC: {{ cc }}
        CXX: {{ cxx }}
        OPTS: travis.ninja
{% endfor %}

{% for (cc, cxx), image, subdir, kind in matrix %}
{%- if ('cpp' in kind and subdir != 'functions') or ('headercheck' in kind and subdir not in ('functions1', 'functions2')) %}
{{subdir}} {{ cc }} {{ image[image.find('debian')+1+6:] }} {{kind}}:
    extends: .subdir-test
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
        TESTS_MODULE_SUBDIR: {{ subdir }}
        CC: {{ cc }}
        CXX: {{ cxx }}
        OPTS: travis.ninja
    {%- if 'cpp' in kind or 'gdt' in subdir %}
    tags:
        - dustin
    {%- endif %}
    stage: {{kind}}
    needs: ["{{ image }} {{ cc }}"]
    script:
          - ./.ci/gitlab/test_{{kind}}.bash
{%- endif %}
{% endfor %}

{% for (cc, cxx), image in compiler_images %}
{{ image[image.find('debian')+1+6:] }} {{ cc }} python:
    extends: .subdir-test
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ cc }}
        CC: {{ cc }}
        CXX: {{ cxx }}
        OPTS: travis.ninja
    tags:
    {%- if 'gdt' in subdirs[0] and 'clang' in image %}
        - lucas
    {%- else %}
        - dustin
    {%- endif %}
    stage: python
    needs: ["{{ image }} {{ cc }}"]
    script:
          - ./.ci/gitlab/test_python.bash
{% endfor %}


.wheels_base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    LOCAL_UID: 0
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
    GITLAB_PYPI: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi/
  stage: wheels
  image: zivgitlab.wwu.io/ag-ohlberger/dune-community/docker/manylinux-2014_py${GDT_PYTHON_VERSION}:${ML_TAG}
  needs: []
  cache:
    paths:
      - ccache
    when: 'always'
    key: ${GDT_PYTHON_VERSION}_${ML_TAG}
  artifacts:
    expire_in: 1 day
    paths:
      - ninja_log_*.tar.gz
      - ${WHEEL_DIR}/final/dune*whl
  after_script:
    - tar cfz ninja_log_${STEP}_${GDT_PYTHON_VERSION}.tar.gz ${DUNE_BUILD_DIR}/dune-*/.ninja_log || true

.test_base:
  image: harbor.uni-muenster.de/proxy-docker/library/python:${GDT_PYTHON_VERSION}-slim
  stage: test
  script:
    - pip install ${WHEEL_DIR}/final/dune*whl
    - python -c 'from dune.xt import *'
    - python -c 'from dune.gdt import *'

{%- for py in pythons %}

{%- for md in wheel_steps %}
{{md}} {{py}}:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "{{py}}"
    STEP: {{md}}
{%- if md != "all" %}
  needs:
  - all {{py}}
{%- if md == "gdt" %}
  - xt {{py}}
{%- endif %}
  dependencies: ["all {{py}}"]
{%- endif %}
  {#- this can only be one script exactly, to make skipping from within itself possible #}
  script: ./.ci/make_wheels.bash {{md}}
  after_script:
  - ccache --show-stats
{%- if md == "all" %}
{# only the 'make all' output needs to be available in xt+gdt steps #}
  artifacts:
    paths:
      - ${DUNE_BUILD_DIR}
{%- endif %}
{%- endfor %}


{# this step serves to propagate _only_ the wheel instead of the build dir #}
{# Otherwise we'd have the combined build output of xt+gdt wheel steps at some point #}
wheel collect {{py}}:
  stage: wheels
  variables:
    GIT_SUBMODULE_STRATEGY: none
  dependencies:
  {%- for md in wheel_steps_no_all %}
    - "{{md}} {{py}}"
  {%- endfor %}
  needs:
  {%- for md in wheel_steps_no_all %}
    - "{{md}} {{py}}"
  {%- endfor %}
  image: harbor.uni-muenster.de/proxy-docker/library/alpine:3.15
  script:
    - rm -rf ${DUNE_BUILD_DIR}
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/dune*whl

test wheels {{py}}:
  extends: .test_base
  variables:
    GIT_SUBMODULE_STRATEGY: none
    GDT_PYTHON_VERSION: "{{py}}"
  needs: ["wheel collect {{py}}",]
  dependencies: ["wheel collect {{py}}",]
{%- endfor %}

.publish:
  image: alpine:3.15
  dependencies:
{%- for py in pythons %}
  -  "wheel collect {{py}}"
{%- endfor %}
  needs:
{%- for py in pythons %}
  -  "wheel collect {{py}}"
  -  "test wheels {{py}}"
{%- endfor %}
  stage: publish
  before_script:
      - apk --update add py3-pip git file bash python3 py3-cffi py3-cryptography
      - pip3 install -U twine
  variables:
    TWINE_PASSWORD: ${TWINE_PASSWORD}
    TWINE_USERNAME: ${TWINE_USERNAME}
  script:
    - cd ${MOD_DIR}
    - pwd
    - git describe --tags HEAD
    - git tag --list
    # upload only if a tag points to checked out commit
    - (git describe --exact-match --tags HEAD && python3 -m twine upload ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl) || echo "not uploading untagged wheels"
    - git checkout 2021.1.9
    - (git describe --exact-match --tags HEAD ) || echo "still not a tag"
  artifacts:
    paths:
      - ${WHEEL_DIR}/final/${MOD_WHEEL_PREFIX}*whl

publish dune-xt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_xt
    MOD_DIR: dune-xt

publish dune-gdt:
  extends: .publish
  variables:
    MOD_WHEEL_PREFIX: dune_gdt
    MOD_DIR: dune-gdt