# THIS FILE IS AUTOGENERATED -- DO NOT EDIT       #
# Edit and Re-run .ci/gitlab/config_template.py instead  #
stages:
  - sanity
  - images
{%- for kind in kinds %}
  - {{kind}}
{%- endfor %}
  - python
  - wheels
  - publish

variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TRAVIS_BRANCH: ${CI_COMMIT_REF_NAME}
    TRAVIS_COMMIT: ${CI_COMMIT_SHA}
    CCACHE_BASEDIR: ${CI_PROJECT_DIR}
    CCACHE_DIR: "${CI_PROJECT_DIR}/.ccache"
    CCACHE_COMPILERCHECK: content
    CCACHE_COMPRESS: "true"
    PYTEST_ADDOPTS: "-s"
    MY_MODULE: dune-gdt
    BASE_PROJECT: zivgitlab.wwu.io/ag-ohlberger/dune-community/DUNE_XT_OR_DUNE_GDT-super

.image_builder:
    tags:
      - docker-in-docker
      - long execution time
    stage: images
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: harbor.uni-muenster.de/proxy-docker/library/docker:19.03.12
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
        IMAGE: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
    before_script:
      - |
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        apk --update add py3-pip openssh-client rsync git file bash python3 curl
        pip3 install -U docker jinja2 docopt
    script:
      - |
        git submodule update --init --recursive
        docker build --build-arg DEBIAN_BASE=${CI_IMAGE} -t ${IMAGE} -f deps/Dockerfile deps/
        docker push ${IMAGE}
    services:
        - name: harbor.uni-muenster.de/proxy-docker/library/docker:dind
          alias: docker

.subdir-test:
    tags:
      - long execution time
    stage: test
    rules:
        - if: '$CI_COMMIT_REF_NAME =~ /^staging.*/'
          when: never
        - when: on_success
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: ${CI_REGISTRY_IMAGE}/ci_testing_${CI_IMAGE}_${COMPILER}:${CI_COMMIT_SHA}
    cache:
      key: "$CI_JOB_NAME"
      paths:
        - .ccache
    before_script:
      - |
        mkdir /home/dune-ci/testresults && chmod -R 777 /home/dune-ci/testresults
        [[ -f ./.gitsuper ]] && echo "Please remove .gitsuper from the repo" && exit 1
        ccache --zero-stats || true
    after_script:
      - ccache --show-stats
    artifacts:
      reports:
        junit: '/home/dune-ci/testresults/*xml'

.pre-commit:
    stage: sanity
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: "harbor.uni-muenster.de/proxy-docker/library/python:3.9"
    cache:
      paths:
        - ${CI_PROJECT_DIR}/.cache/pre-commit
    variables:
        PRECOMMIT: "pre-commit run --all"
    before_script:
        - pip install pre-commit
        - pre-commit install --install-hooks

format_check:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} clang-format
        - ${PRECOMMIT} yapf
        - ${PRECOMMIT} trailing-whitespace
        - ${PRECOMMIT} cmake-format

lint:
    extends: .pre-commit
    script:
        - ${PRECOMMIT} check-added-large-files
        {# disabled for now, lots of issues #}
        {# - ${PRECOMMIT} flake8 #}
        - ${PRECOMMIT} debug-statements
        - ${PRECOMMIT} check-yaml


{% for compiler, image in compiler_images -%}
{{ image }} {{ compiler }}:
    extends: .image_builder
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ compiler }}
{% endfor %}

{% for compiler, image, subdir, kind in matrix %}
{%- if ('cpp' in kind and subdir != 'xt/functions') or ('headercheck' in kind and subdir not in ('xt/functions1', 'xt/functions2')) %}
{{subdir}} {{ compiler }} {{ image[image.find('debian')+1+6:] }} {{kind}}:
    extends: .subdir-test
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ compiler }}
        TESTS_MODULE_SUBDIR: {{ subdir }}
    {%- if 'cpp' in kind or 'gdt' in subdir %}
    tags:
        - dustin
    {%- endif %}
    stage: {{kind}}
    needs: ["{{ image }} {{ compiler }}"]
    script:
          - ./.ci/shared/scripts/test_{{kind}}.bash
{%- endif %}
{% endfor %}

{% for compiler, image in compiler_images %}
{{ image[image.find('debian')+1+6:] }} {{ compiler }} python:
    extends: .subdir-test
    variables:
        CI_IMAGE: {{ image }}
        COMPILER: {{ compiler }}
    tags:
    {%- if 'gdt' in subdirs[0] and 'clang' in image %}
        - lucas
    {%- else %}
        - dustin
    {%- endif %}
    stage: python
    needs: ["{{ image }} {{ compiler }}"]
    script:
          - ./.ci/shared/scripts/test_python.bash
{% endfor %}

.wheels_base:
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: gitlab-ci-token
  stage: wheels
  needs: []
  extends: .image_builder
  script:
    - ./make_docker_wheels.bash
    - python3 -m twine check docker/wheelhouse/final/*.whl
  artifacts:
    paths:
      - docker/wheelhouse/final/*.whl

{% for py in wheel_pythons %}
wheels {{py}}:
  extends: .wheels_base
  variables:
    GDT_PYTHON_VERSION: "{py}"
{% endfor %}

.publish:
  image: alpine:3.12
  dependencies:
{% for py in wheel_pythons %}
    - wheels {{py}}
{% endfor %}
  stage: publish
  before_script:
      - apk --update add py3-pip git file bash python3 py3-cffi py3-cryptography
      - pip3 install -U twine

publish dune-xt:
  extends: .publish
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi docker/wheelhouse/final/dune_xt*.whl
  artifacts:
    paths:
      - docker/wheelhouse/final/dune_xt*.whl

publish dune-gdt:
  extends: .publish
  script:
    - TWINE_PASSWORD=${CI_JOB_TOKEN} TWINE_USERNAME=gitlab-ci-token python3 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi docker/wheelhouse/final/dune_gdt*.whl
  artifacts:
    paths:
      - docker/wheelhouse/final/dune_gdt*.whl
