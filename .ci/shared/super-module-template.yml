stages:
  - base
  - modules

variables:
  GIT_SUBMODULE_STRATEGY: none

.docker-in-docker:
    tags:
        - dustin
    retry:
        max: 2
        when:
            - runner_system_failure
            - stuck_or_timeout_failure
            - api_failure
    image: harbor.uni-muenster.de/proxy-docker/library/docker:stable
    variables:
        DOCKER_HOST: tcp://docker:2375/
        DOCKER_DRIVER: overlay2
    before_script:
        - apk --update add py3-pip openssh-client rsync git file bash python3
        - pip3 install -U docker jinja2 docopt
        - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
        - git submodule update --init .ci/shared
    services:
        - name: harbor.uni-muenster.de/proxy-docker/library/docker:dind
          alias: docker
    environment:
        name: unsafe
    script: .ci/shared/docker/update_test_dockers.py ${MODULE_NAME} ${IMAGE_NAME}

# base_debian-unstable_gcc:
#     extends: .docker-in-docker
#     stage: base
#     variables:
#       MODULE_NAME: BASE
#       IMAGE_NAME: debian-unstable_gcc_full

base_debian_gcc:
    extends: .docker-in-docker
    stage: base
    variables:
      MODULE_NAME: BASE
      IMAGE_NAME: debian_gcc_full

base_debian_clang:
    extends: .docker-in-docker
    stage: base
    variables:
      MODULE_NAME: BASE
      IMAGE_NAME: debian_clang_full

# debian-unstable_gcc_full:
#     extends: .docker-in-docker
#     stage: modules
#     needs: ["base_debian-unstable_gcc"]
#     variables:
#       MODULE_NAME: ${DUNE_XT_OR_DUNE_GDT}
#       IMAGE_NAME: debian-unstable_gcc_full

debian_gcc_full:
    extends: .docker-in-docker
    stage: modules
    needs: ["base_debian_gcc"]
    variables:
      MODULE_NAME: ${DUNE_XT_OR_DUNE_GDT}
      IMAGE_NAME: debian_gcc_full

debian_clang_full:
    extends: .docker-in-docker
    stage: modules
    needs: ["base_debian_clang"]
    variables:
      MODULE_NAME: ${DUNE_XT_OR_DUNE_GDT}
      IMAGE_NAME: debian_clang_full

super:
  extends: .docker-in-docker
  stage: modules
  variables:
    BASE: debian
    IMAGE: ${CI_REGISTRY_IMAGE}/super_debian:${CI_COMMIT_SHA}
  script: |
    docker build --build-arg BASE=${BASE} -t ${IMAGE} -f .ci/shared/docker/super_docker/Dockerfile .
    docker push ${IMAGE}
