---
name: Test

on:
    push:
    #     branches:
    #         - main
    # pull_request:

concurrency:
    group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
    cancel-in-progress: true

env:
    DUNE_BUILD_DIR: /build

jobs:
    build_images:
        uses: ./.github/workflows/build_images.yml
    test_cpp:
        runs-on: ubuntu-22.04
        needs: [build_images]
        strategy:
            matrix: ${{ fromJson(needs.build_images.outputs.matrix-combinations) }}
            fail-fast: false
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Setup ccache
              id: ccache-cpp
              uses: actions/cache@v3
              with:
                path: ${{ github.workspace }}/ccache
                key: ${{matrix.CC}}-cpp-ccache
            - name: C++ Tests ${{matrix.CC}}
              run: |
                  docker run --rm \
                    -e DUNE_BUILD_DIR=${DUNE_BUILD_DIR} \
                    -e GITHUB_RUN_NUMBER \
                    -v ${GITHUB_WORKSPACE}/build/testresults/:/build/testresults \
                    -v ${GITHUB_WORKSPACE}/ccache/:/root/.ccache \
                    -e OMPI_ALLOW_RUN_AS_ROOT=1 -e OMPI_ALLOW_RUN_AS_ROOT_CONFIRM=1 \
                    ${{ needs.build_images.outputs.image_tag }}_${{matrix.CC}} \
                    /src/.github/workflows/test_cpp.bash
            - uses: actions/upload-artifact@v3
              name: Upload CPP results
              if: always()
              with:
                name: cpp_junit_reports
                path: ${{ github.workspace }}/build/testresults/*xml
    test_headercheck:
        runs-on: ubuntu-22.04
        needs: [build_images]
        strategy:
            matrix: ${{ fromJson(needs.build_images.outputs.matrix-combinations) }}
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Setup ccache
              id: ccache-header
              uses: actions/cache@v3
              with:
                path: ${{ github.workspace }}/ccache
                key: ${{matrix.CC}}-header-ccache
            - name: Headercheck ${{matrix.CC}}
              run: |
                  docker run --rm \
                    -e GITHUB_RUN_NUMBER \
                    -v ${GITHUB_WORKSPACE}/ccache/:/root/.ccache \
                    ${{ needs.build_images.outputs.image_tag }}_${{matrix.CC}} \
                    /src/.github/workflows/test_headercheck.bash
    test_python:
        runs-on: ubuntu-22.04
        needs: [build_images]
        strategy:
            matrix: ${{ fromJson(needs.build_images.outputs.matrix-combinations) }}
            fail-fast: false
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Setup ccache
              id: ccache-py
              uses: actions/cache@v3
              with:
                path: ${{ github.workspace }}/ccache
                key: ${{matrix.CC}}-py-ccache
            - name: Python Tests ${{matrix.CC}}
              run: |
                  docker run --rm \
                    -e DUNE_BUILD_DIR=${DUNE_BUILD_DIR} \
                    -e GITHUB_RUN_NUMBER \
                    -v ${GITHUB_WORKSPACE}/ccache/:/root/.ccache \
                    -v ${GITHUB_WORKSPACE}/build/testresults/:/build/testresults \
                    ${{ needs.build_images.outputs.image_tag }}_${{matrix.CC}} \
                    /src/.github/workflows/test_python.bash
            - uses: actions/upload-artifact@v3
              name: Upload Python results
              if: always()
              with:
                name: python_junit_reports
                path: ${{ github.workspace }}/build/testresults/*xml
    combine_reports:
      needs: [test_cpp, test_python]
      runs-on: ubuntu-22.04
      steps:
        - uses: actions/download-artifact@v3
          name: Download Python reports
          with:
            name: python_junit_reports
        - uses: actions/download-artifact@v3
          name: Download C++ reports
          with:
            name: cpp_junit_reports
        # - uses: actions/setup-node@v3
        #   with:
        #     node-version: 16
        # - run: npm install -g junit-report-merger
        # - run: jrm combined_report.xml "*.xml"
        - uses: actions/upload-artifact@v3
          with:
            name: combined_report
            path: "*.xml"
