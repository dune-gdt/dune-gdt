---
name: build and test

on:
    push:
    #     branches:
    #         - main
    # pull_request:

concurrency:
    group: ${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}
    cancel-in-progress: true

env:
    DUNE_BUILD_DIR: /build

jobs:
    matrix-setup:
        runs-on: ubuntu-22.04
        steps:
            - name: Setup matrix combinations
              id: setup-matrix-combinations
              run: |
                  MATRIX_PARAMS_COMBINATIONS='
                      {"CC": "clang", "CXX": "clang++"},
                      {"CC": "gcc", "CXX": "g++"},
                  '
                  echo ::set-output name=matrix-combinations::{\"include\":[$MATRIX_PARAMS_COMBINATIONS]}
        outputs:
            matrix-combinations: ${{ steps.setup-matrix-combinations.outputs.matrix-combinations }}

    metadata:
        runs-on: ubuntu-22.04
        needs: matrix-setup
        steps:
            - uses: actions/checkout@v3
              with:
                submodules: true
            - name: Docker meta
              id: meta
              uses: docker/metadata-action@v4
              with:
                  images: ghcr.io/${{github.repository}}/ci_test
                  flavor: |
                      latest=false
                  tags: |
                      type=sha,suffix=-g{{branch}}
        outputs:
            tags: ${{steps.meta.outputs.tags}}
    build:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        permissions:
            packages: write
        steps:
            - uses: actions/checkout@v3
              with:
                submodules: true
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Build Image
              uses: docker/build-push-action@v3
              with:
                  context: .
                  push: true
                  file: deps/Dockerfile
                  cache-from: type=registry,ref=ghcr.io/${{github.repository}}/ci_test
                  cache-to: type=inline
                  tags: ${{ needs.metadata.outputs.tags }}_${{matrix.CC}}
                  build-args: |
                      BUILD_CXX=${{matrix.CXX}}
                      BUILD_CC=${{matrix.CC}}
                      DEBIAN_BASE=debian
                      BUILD_OPTS=travis.ninja
    test_cpp:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup, build]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: C++ Tests ${{matrix.CC}}
              run: |
                  docker run --rm \
                    -e DUNE_BUILD_DIR=${DUNE_BUILD_DIR} \
                    -v ${GITHUB_WORKSPACE}/build/testresults/:/build/testresults \
                    ${{ needs.metadata.outputs.tags }}_${{matrix.CC}} \
                    /src/.ci/gitlab/test_cpp.bash
            - uses: actions/upload-artifact@v3
              with:
                name: junit_reports
                path: ${GITHUB_WORKSPACE}/build/testresults/*xml
    test_headercheck:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup, build]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Headercheck ${{matrix.CC}}
              run: |
                  docker run --rm \
                    ${{ needs.metadata.outputs.tags }}_${{matrix.CC}} \
                    /src/.ci/gitlab/test_headercheck.bash
    test_python:
        runs-on: ubuntu-22.04
        needs: [metadata, matrix-setup, build]
        strategy:
            matrix: ${{ fromJson(needs.matrix-setup.outputs.matrix-combinations) }}
        steps:
            - name: Login to Github Packages
              uses: docker/login-action@v2
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Python Tests ${{matrix.CC}}
              run: |
                  docker run --rm \
                    -e DUNE_BUILD_DIR=${DUNE_BUILD_DIR} \
                    ${{ needs.metadata.outputs.tags }}_${{matrix.CC}} \
                    /src/.ci/gitlab/test_python.bash
    wheels:
        runs-on: ubuntu-22.04
        strategy:
            matrix:
                python: ["3.8", "3.9", "3.10"]
        steps:
            - uses: actions/checkout@v3
              with:
                submodules: true
            - name: Set up Docker Buildx
              id: buildx
              uses: docker/setup-buildx-action@v2
            - run: |
                source .env
                docker run --rm \
                    -v ${GITHUB_WORKSPACE}/wheelhouse:/wheelhouse \
                    -v ${PWD}:/home/dxt/src \
                    -e WHEEL_DIR=/wheelhouse \
                    -e LOCAL_UID=0 \
                    -e DUNE_SRC_DIR=/home/dxt/src \
                    zivgitlab.wwu.io/ag-ohlberger/dune-community/docker/manylinux-2_28_x86_64_py${{matrix.python}}:${ML_TAG} \
                    /home/dxt/src/.ci/make_wheels.bash
              name: Build Wheel py${{matrix.python}}
            - uses: actions/upload-artifact@v3
              with:
                name: wheels
                path: ${{github.workspace}}/wheelhouse/final/dune*whl

    publish:
        needs: [wheels]
        runs-on: ubuntu-22.04
        steps:
            - run: |
                ls -l *
                find . -name "*.whl"
            - name: PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/20')
              with:
                password: ${{ secrets.PYPI_API_TOKEN }}
                packages_dir: wheelhouse/final/
                verbose: true
            - name: Test PyPI
              uses: pypa/gh-action-pypi-publish@release/v1
              with:
                password: ${{ secrets.TEST_PYPI_API_TOKEN }}
                verbose: true
                packages_dir: wheelhouse/final/
